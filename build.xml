<?xml version="1.0" encoding="UTF-8"?>

<project name="slashbug" default="install">

    <property file="build.properties"/>
    <property name="test-scope" value="All"/>

    <condition property="isMacOrLinux">
        <or>
            <os family="mac"/>
            <os family="unix"/>
        </or>
    </condition>

    <target name="_update-database-access">
        <exec executable="php">
            <arg value="-r"/>
            <arg value="$file = file_get_contents('./app/Config/database.php.default'); $file = str_replace('#dbname#','${db.name}',$file); $file = str_replace('#dbtestname#','${db.test.name}',$file); $file = str_replace('#password#','${db.password}',$file); $file = str_replace('#login#','${db.login}',$file); file_put_contents('./app/Config/database.php', $file);"/>
        </exec>
    </target>

    <!-- Tache unitaire -->
    <target name="_clean">
        <delete dir="./app/tmp"/>
        <mkdir dir="./target" mode="0755"/>
        <mkdir dir="./app/tmp" mode="0777"/>
        <mkdir dir="./app/tmp/cache" mode="0777"/>
        <mkdir dir="./app/tmp/cache/models" mode="0777"/>
        <mkdir dir="./app/tmp/cache/persistent" mode="0777"/>
        <mkdir dir="./app/tmp/cache/views" mode="0777"/>
        <mkdir dir="./app/tmp/logs" mode="0777"/>
        <mkdir dir="./app/tmp/sessions" mode="0777"/>
        <mkdir dir="./app/tmp/tests" mode="0777"/>
    </target>

    <target name="_clean-target">
        <delete dir="./target"/>
        <mkdir dir="./target" mode="0755"/>
    </target>

    <target name="_init-db">
        <if>
            <isset property="db.password"/>
            <then>
                <pdo url="mysql:host=localhost" password="${db.password}" encoding="utf8" userId="${db.login}"
                     onerror="abort">
                    DROP DATABASE IF EXISTS `${db.name}`;
                    CREATE DATABASE `${db.name}`;
                    USE `${db.name}`;
                </pdo>
                <pdo url="mysql:host=localhost;dbname=${db.name}" password="${db.password}" encoding="utf8"
                     userId="${db.login}" onerror="abort">
                    <filelist dir="./etc" files="01-init-table.sql"/>
                </pdo>
            </then>
            <else>
                <pdo url="mysql:host=localhost" encoding="utf8" userId="${db.login}" onerror="abort">
                    DROP DATABASE IF EXISTS `${db.name}`;
                    CREATE DATABASE `${db.name}`;
                    USE `${db.name}`;
                </pdo>
                <pdo url="mysql:host=localhost;dbname=${db.name}" encoding="utf8" userId="${db.login}" onerror="abort">
                    <filelist dir="./etc" files="01-init-table.sql"/>
                </pdo>
            </else>
        </if>
    </target>

    <target name="_init-db-mock">
        <if>
            <isset property="db.password"/>
            <then>
                <pdo url="mysql:host=localhost" password="${db.password}" encoding="utf8" userId="${db.login}"
                     onerror="abort">
                    DROP DATABASE IF EXISTS `${db.name}`;
                    CREATE DATABASE `${db.name}`;
                    USE `${db.name}`;
                </pdo>
                <pdo url="mysql:host=localhost;dbname=${db.name}" password="${db.password}" encoding="utf8"
                     userId="${db.login}" onerror="abort">
                    <filelist dir="./etc" files="01-init-table.sql,02-mock-data.sql"/>
                </pdo>
            </then>
            <else>
                <pdo url="mysql:host=localhost" encoding="utf8" userId="${db.login}" onerror="abort">
                    DROP DATABASE IF EXISTS `${db.name}`;
                    CREATE DATABASE `${db.name}`;
                    USE `${db.name}`;
                </pdo>
                <pdo url="mysql:host=localhost;dbname=${db.name}" encoding="utf8" userId="${db.login}" onerror="abort">
                    <filelist dir="./etc" files="01-init-table.sql,02-mock-data.sql"/>
                </pdo>
            </else>
        </if>
    </target>

    <target name="_init-db-test">
        <if>
            <isset property="db.password"/>
            <then>
                <pdo url="mysql:host=localhost" encoding="utf8" password="${db.password}"
                     userId="${db.login}" onerror="abort">
                    DROP DATABASE IF EXISTS `${db.test.name}`;
                    CREATE DATABASE `${db.test.name}`;
                    USE `${db.test.name}`;
                </pdo>
                <pdo url="mysql:host=localhost;dbname=${db.test.name}" encoding="utf8" password="${db.password}"
                     userId="${db.login}" onerror="abort">
                    <filelist dir="./etc" files="01-init-table.sql"/>
                </pdo>
            </then>
            <else>
                <pdo url="mysql:host=localhost" encoding="utf8" userId="${db.login}"
                     onerror="abort">
                    DROP DATABASE IF EXISTS `${db.test.name}`;
                    CREATE DATABASE `${db.test.name}`;
                    USE `${db.test.name}`;
                </pdo>
                <pdo url="mysql:host=localhost;dbname=${db.test.name}" encoding="utf8" userId="${db.login}"
                     onerror="abort">
                    <filelist dir="./etc" files="01-init-table.sql"/>
                </pdo>
            </else>
        </if>
    </target>

    <target name="_unit-test">
        <if>
            <equals arg1="${isMacOrLinux}" arg2="true"/>
            <then>
                <exec dir="./app" command="./Console/cake test app ${test-scope}" passthru="true"/>
            </then>
            <else>
                <exec dir="./app" command="Console\cake.bat test app ${test-scope}" passthru="true"/>
            </else>
        </if>

    </target>

    <target name="_unit-coverage">
        <if>
            <equals arg1="${isMacOrLinux}" arg2="true"/>
            <then>
                <exec dir="./app"
                      command="./Console/cake test --stderr --log-junit ../target/junit.xml --configuration ../etc/phpunit.xml app ${test-scope}"
                      passthru="true"/>
            </then>
            <else>
                <exec dir="./app"
                      command="Console\cake.bat test --stderr --log-junit ../target/junit.xml --configuration ../etc/phpunit.xml app ${test-scope}"
                      passthru="true"/>
            </else>
        </if>
    </target>


    <target name="_release">
        <exec dir="./app/Config"
              command="cat bootstrap.php | grep APPLICATION_VERSION | perl -n -e'/(\d+)/ &amp;&amp; print $1'"
              outputProperty="currentVersion"/>
        <exec command="git tag v${currentVersion} -am'v${currentVersion}'" passthru="true"/>

        <exec command="echo ${currentVersion} + 1 | bc" outputProperty="newVersion"/>

        <exec executable="php">
            <arg value="-r"/>
            <arg value="$file = file_get_contents('./app/Config/bootstrap.php'); $file = preg_replace('/define\(\'APPLICATION_VERSION\', \'(\d+)\'\)/','define(\'APPLICATION_VERSION\', \'${newVersion}\')',$file);file_put_contents('./app/Config/bootstrap.php', $file);"/>
        </exec>
        <exec command="git commit -am'start of version ${newVersion}'" passthru="true"/>
        <exec command="git push "/>
        <exec command="git push --tags"/>
    </target>

    <!-- Tache globale -->

    <target name="clean">
        <phingcall target="_clean"/>
        <phingcall target="_clean-target"/>
    </target>

    <target name="test">
        <phingcall target="clean"/>
        <phingcall target="_update-database-access"/>
        <phingcall target="_init-db-test"/>
        <phingcall target="_unit-test"/>
        <phingcall target="_clean"/>
    </target>

    <target name="coverage">
        <phingcall target="clean"/>
        <phingcall target="_update-database-access"/>
        <phingcall target="_init-db-test"/>
        <phingcall target="_unit-coverage"/>
        <phingcall target="_clean"/>
    </target>

    <target name="install">
        <phingcall target="clean"/>
        <phingcall target="_update-database-access"/>
        <phingcall target="_init-db"/>
        <phingcall target="clean"/>
    </target>

    <target name="install-mock">
        <phingcall target="clean"/>
        <phingcall target="_update-database-access"/>
        <phingcall target="_init-db-mock"/>
        <phingcall target="clean"/>
    </target>

    <target name="release">
        <phingcall target="_release"/>
    </target>

</project>
